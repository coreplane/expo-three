{"version":3,"file":"loadModelsAsync.js","sourceRoot":"","sources":["../../src/loaders/loadModelsAsync.ts"],"names":[],"mappings":"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","sourcesContent":["import AssetUtils from 'expo-asset-utils';\nimport THREE from '../Three';\nimport readAsStringAsync from './readAsStringAsync';\n\nfunction provideBundlingExtensionErrorMessage({ extension, funcName }) {\n  return `\n    ExpoTHREE.${funcName}: The \\`asset\\` provided cannot be resolved. \n    Please make sure your Expo project's \\`app.json\\` is bundling your asset, by including the extension: ${extension}\n      // app.json\n      \"expo\": {\n          \"packagerOpts\": {\n              assetExts: [ \n                  \"${extension}\", \n                  ... \n              ],\n          }\n      }`;\n}\n\nasync function loadFileAsync({\n  asset,\n  extension,\n  funcName,\n}): Promise<string | null> {\n  if (!asset) {\n    throw new Error(`ExpoTHREE.${funcName}: Cannot parse a null asset`);\n  }\n  try {\n    return await AssetUtils.uriAsync(asset);\n  } catch ({ message }) {\n    const customErrorMessage = provideBundlingExtensionErrorMessage({\n      extension,\n      funcName,\n    });\n    throw new Error(`${customErrorMessage}, ${message}`);\n  }\n}\n\nexport async function loadMtlAsync({ asset, onAssetRequested }): Promise<any> {\n  let uri = await loadFileAsync({\n    asset,\n    extension: 'mtl',\n    funcName: 'loadMtlAsync',\n  });\n  if (!uri) return;\n\n  // @ts-ignore\n  if (THREE.MTLLoader == null) {\n    require('./MTLLoader');\n  }\n\n  // @ts-ignore\n  const loader = new THREE.MTLLoader();\n  loader.setPath(onAssetRequested);\n\n  return loadFileContentsAsync(loader, uri, 'loadMtlAsync');\n}\n\nexport async function loadObjAsync(options: {\n  asset: any;\n  onAssetRequested?: (...args: any[]) => any;\n  onMtlAssetRequested?: (...args: any[]) => any;\n  mtlAsset?: any;\n  materials?: any;\n}): Promise<any> {\n  const {\n    asset,\n    onAssetRequested,\n    onMtlAssetRequested,\n    mtlAsset,\n    materials,\n  } = options;\n  let nextMaterials = materials;\n  if (nextMaterials == null && mtlAsset != null) {\n    nextMaterials = await loadMtlAsync({\n      asset: mtlAsset,\n      onAssetRequested: onMtlAssetRequested || onAssetRequested,\n    });\n    nextMaterials.preload();\n  }\n\n  let uri = await loadFileAsync({\n    asset,\n    extension: 'obj',\n    funcName: 'loadObjAsync',\n  });\n  if (!uri) return;\n\n  // @ts-ignore\n  if (THREE.OBJLoader == null) {\n    require('three/examples/js/loaders/OBJLoader');\n  }\n  // @ts-ignore\n  const loader = new THREE.OBJLoader();\n  loader.setPath(onAssetRequested as any);\n  if (nextMaterials != null) {\n    loader.setMaterials(nextMaterials);\n  }\n\n  return loadFileContentsAsync(loader, uri, 'loadObjAsync');\n}\n\nexport async function loadDaeAsync({\n  asset,\n  onAssetRequested,\n  onProgress,\n}): Promise<any> {\n  let uri = await loadFileAsync({\n    asset,\n    extension: 'dae',\n    funcName: 'loadDaeAsync',\n  });\n  if (typeof uri !== 'string' || uri == null) {\n    return;\n  }\n\n  // @ts-ignore\n  if (THREE.ColladaLoader == null) {\n    require('three/examples/js/loaders/ColladaLoader');\n  }\n\n  return new Promise((res, rej) =>\n    new THREE.FileLoader().load(\n      uri!,\n      text => {\n        // @ts-ignore\n        const loader = new THREE.ColladaLoader();\n        const parsedResult = (loader.parse as any)(text, onAssetRequested);\n        res(parsedResult);\n      },\n      onProgress,\n      rej,\n    ),\n  );\n}\n\nasync function loadFileContentsAsync(loader, uri, funcName): Promise<any> {\n  try {\n    const fileContents = await readAsStringAsync(uri);\n    return loader.parse(fileContents);\n  } catch ({ message }) {\n    // Or model loader THREE.OBJLoader failed to parse fileContents\n    throw new Error(\n      `ExpoTHREE.${funcName}: Expo.FileSystem Failed to read uri: ${uri}. ${message}`,\n    );\n  }\n}\n\nexport async function loadArrayBufferAsync({ uri, onProgress }): Promise<any> {\n  const loader = new THREE.FileLoader();\n  loader.setResponseType('arraybuffer');\n  return new Promise((res, rej) => loader.load(uri, res, onProgress, rej));\n}\n"]}