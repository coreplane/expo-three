{"version":3,"file":"loadModelsAsync.js","sourceRoot":"","sources":["../../src/loaders/loadModelsAsync.ts"],"names":[],"mappings":"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","sourcesContent":["import AssetUtils from 'expo-asset-utils';\nimport { Platform } from 'react-native';\nimport THREE from '../Three';\nimport readAsStringAsync from './readAsStringAsync';\n\nvar MTLLoader = null;\nvar OBJLoader = null;\nvar ColladaLoader = null;\n\nfunction provideBundlingExtensionErrorMessage({ extension, funcName }) {\n  return `\n    ExpoTHREE.${funcName}: The \\`asset\\` provided cannot be resolved. \n    Please make sure your Expo project's \\`app.json\\` is bundling your asset, by including the extension: ${extension}\n      // app.json\n      \"expo\": {\n          \"packagerOpts\": {\n              assetExts: [ \n                  \"${extension}\", \n                  ... \n              ],\n          }\n      }`;\n}\n\nasync function loadFileAsync({ asset, extension, funcName }): Promise<string | null> {\n  if (!asset) {\n    throw new Error(`ExpoTHREE.${funcName}: Cannot parse a null asset`);\n  }\n  try {\n    return await AssetUtils.uriAsync(asset);\n  } catch ({ message }) {\n    const customErrorMessage = provideBundlingExtensionErrorMessage({\n      extension,\n      funcName,\n    });\n    throw new Error(`${customErrorMessage}, ${message}`);\n  }\n}\n\nexport async function loadTextureAsync({ asset }): Promise<any> {\n  if (!asset) {\n    throw new Error('ExpoTHREE.loadTextureAsync(): Cannot parse a null asset');\n  }\n\n  if (Platform.OS === 'web') {\n    const assetUrl = await AssetUtils.uriAsync(asset);\n    // DJM - return an actual promise here\n    const loader = new THREE.TextureLoader();\n    return new Promise((resolve, reject) => {\n        loader.load(assetUrl,\n\t\ttexture => resolve(texture),\n                undefined,\n                err => reject(err));\n        });\n  }\n\n  let nextAsset = asset;\n  if (!nextAsset.localUri) {\n    nextAsset = await AssetUtils.resolveAsync(asset);\n  }\n  const texture = new THREE.Texture();\n  texture.image = {\n    data: nextAsset,\n    width: nextAsset.width,\n    height: nextAsset.height,\n  };\n  texture.needsUpdate = true;\n  texture['isDataTexture'] = true; // Forces passing to `gl.texImage2D(...)` verbatim\n  texture.minFilter = THREE.LinearFilter; // Pass-through non-power-of-two\n  return texture;\n}\n\nexport async function loadMtlAsync({ asset, onAssetRequested }): Promise<any> {\n  let uri = await loadFileAsync({\n    asset,\n    extension: 'mtl',\n    funcName: 'loadMtlAsync',\n  });\n  if (!uri) return;\n\n  if (MTLLoader == null) {\n    MTLLoader = require('./MTLLoader');\n  }\n  // @ts-ignore\n  const loader = new MTLLoader();\n  loader.setPath(onAssetRequested);\n\n  return loadFileContentsAsync(loader, uri, 'loadMtlAsync');\n}\n\nexport async function loadObjAsync(options: {\n  asset: any;\n  onAssetRequested?: (...args: any[]) => any;\n  onMtlAssetRequested?: (...args: any[]) => any;\n  mtlAsset?: any;\n  materials?: any;\n}): Promise<any> {\n  const { asset, onAssetRequested, onMtlAssetRequested, mtlAsset, materials } = options;\n  let nextMaterials = materials;\n  if (nextMaterials == null && mtlAsset != null) {\n    nextMaterials = await loadMtlAsync({\n      asset: mtlAsset,\n      onAssetRequested: onMtlAssetRequested || onAssetRequested,\n    });\n    nextMaterials.preload();\n  }\n\n  let uri = await loadFileAsync({\n    asset,\n    extension: 'obj',\n    funcName: 'loadObjAsync',\n  });\n  if (!uri) return;\n\n  if (OBJLoader == null) {\n    OBJLoader = require('three/examples/js/loaders/OBJLoader');\n  }\n  // @ts-ignore\n  const loader = new OBJLoader();\n  loader.setPath(onAssetRequested as any);\n  if (nextMaterials != null) {\n    loader.setMaterials(nextMaterials);\n  }\n\n  return loadFileContentsAsync(loader, uri, 'loadObjAsync');\n}\n\nexport async function loadDaeAsync({ asset, onAssetRequested, onProgress }): Promise<any> {\n  let uri = await loadFileAsync({\n    asset,\n    extension: 'dae',\n    funcName: 'loadDaeAsync',\n  });\n  if (typeof uri !== 'string' || uri == null) {\n    return;\n  }\n\n  if (ColladaLoader == null) {\n    ColladaLoader = require('three/examples/js/loaders/ColladaLoader');\n  }\n\n  return new Promise((res, rej) =>\n    new THREE.FileLoader().load(\n      uri!,\n      text => {\n        // @ts-ignore\n        const loader = new ColladaLoader();\n        const parsedResult = (loader.parse as any)(text, onAssetRequested);\n        res(parsedResult);\n      },\n      onProgress,\n      rej\n    )\n  );\n}\n\nasync function loadFileContentsAsync(loader, uri, funcName): Promise<any> {\n  try {\n    const fileContents = await readAsStringAsync(uri);\n    return loader.parse(fileContents);\n  } catch ({ message }) {\n    // Or model loader THREE.OBJLoader failed to parse fileContents\n    throw new Error(\n      `ExpoTHREE.${funcName}: Expo.FileSystem Failed to read uri: ${uri}. ${message}`\n    );\n  }\n}\n\nexport async function loadArrayBufferAsync({ uri, onProgress }): Promise<any> {\n  const loader = new THREE.FileLoader();\n  loader.setResponseType('arraybuffer');\n  return new Promise((res, rej) => loader.load(uri, res, onProgress, rej));\n}\n"]}