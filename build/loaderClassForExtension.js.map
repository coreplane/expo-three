{"version":3,"file":"loaderClassForExtension.js","sourceRoot":"","sources":["../src/loaderClassForExtension.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,SAAS,CAAC;AAC5B,OAAO,SAAS,MAAM,qBAAqB,CAAC;AAC5C,OAAO,SAAS,MAAM,qBAAqB,CAAC;AAE5C,SAAS,YAAY,CAAC,GAAW;IAC/B,MAAM,gBAAgB,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAY,CAAC;IACxD,OAAO,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,GAAW;IAC3C,MAAM,SAAS,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC;IACpC,OAAO,uBAAuB,CAAC,SAAS,CAAC,CAAC;AAC5C,CAAC;AAED,MAAM,UAAU,uBAAuB,CAAC,SAAiB;IACvD,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE;QACjC,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;KAC7D;IACD,QAAQ,SAAS,CAAC,WAAW,EAAE,EAAE;QAC/B,+DAA+D;QAC/D,KAAK,KAAK,CAAC,CAAC;YACV,OAAO,SAAS,CAAC;SAClB;QACD,KAAK,QAAQ,CAAC,CAAC;YACb,MAAM,UAAU,GAAG,cAAc,CAAC;YAClC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE;gBACtB,OAAO,CAAC,wCAAwC,CAAC,CAAC;aACnD;YACD,OAAO,KAAK,CAAC,UAAU,CAAC,CAAC;SAC1B;QACD,KAAK,SAAS,CAAC,CAAC;YACd,MAAM,UAAU,GAAG,eAAe,CAAC;YACnC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE;gBACtB,OAAO,CAAC,yCAAyC,CAAC,CAAC;aACpD;YACD,OAAO,KAAK,CAAC,UAAU,CAAC,CAAC;SAC1B;QACD,KAAK,KAAK,CAAC,CAAC;YACV,MAAM,UAAU,GAAG,WAAW,CAAC;YAE/B,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE;gBACtB,OAAO,CAAC,qCAAqC,CAAC,CAAC;aAChD;YACD,OAAO,KAAK,CAAC,UAAU,CAAC,CAAC;SAC1B;QACD,KAAK,KAAK,CAAC,CAAC;YACV,MAAM,UAAU,GAAG,WAAW,CAAC;YAC/B,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE;gBACtB,OAAO,CAAC,qCAAqC,CAAC,CAAC;aAChD;YACD,OAAO,KAAK,CAAC,UAAU,CAAC,CAAC;SAC1B;QACD,KAAK,KAAK,CAAC,CAAC;YACV,MAAM,UAAU,GAAG,WAAW,CAAC;YAC/B,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE;gBACtB,OAAO,CAAC,qCAAqC,CAAC,CAAC;aAChD;YACD,OAAO,KAAK,CAAC,UAAU,CAAC,CAAC;SAC1B;QACD,KAAK,KAAK;YACR,OAAO,SAAS,CAAC;QACnB,KAAK,KAAK,CAAC;QACX,KAAK,KAAK,CAAC,CAAC;YACV,MAAM,UAAU,GAAG,WAAW,CAAC;YAC/B,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE;gBACtB,OAAO,CAAC,qCAAqC,CAAC,CAAC;aAChD;YACD,OAAO,KAAK,CAAC,UAAU,CAAC,CAAC;SAC1B;QACD,KAAK,GAAG,CAAC,CAAC;YACR,MAAM,UAAU,GAAG,SAAS,CAAC;YAC7B,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE;gBACtB,OAAO,CAAC,mCAAmC,CAAC,CAAC;aAC9C;YACD,OAAO,KAAK,CAAC,UAAU,CAAC,CAAC;SAC1B;QACD,cAAc;QACd,oFAAoF;QACpF,8BAA8B;QAC9B;YACE,MAAM,IAAI,KAAK,CAAC,8DAA8D,GAAG,SAAS,CAAC,CAAC;KAC/F;AACH,CAAC","sourcesContent":["import THREE from './Three';\nimport MTLLoader from './loaders/MTLLoader';\nimport AMFLoader from './loaders/AMFLoader';\n\nfunction getExtension(uri: string): string {\n  const lastUriComponent = uri.split('.').pop() as string;\n  return lastUriComponent.split('?')[0].split('#')[0];\n}\n\nexport function loaderClassForUri(uri: string): string {\n  const extension = getExtension(uri);\n  return loaderClassForExtension(extension);\n}\n\nexport function loaderClassForExtension(extension: string): any {\n  if (typeof extension !== 'string') {\n    throw new Error('Supplied extension is not a valid string');\n  }\n  switch (extension.toLowerCase()) {\n    // DJM - removed many loaders due to TypeScript incompatibility\n    case 'amf': {\n      return AMFLoader;\n    }\n    case 'assimp': {\n      const loaderName = 'AssimpLoader';\n      if (!THREE[loaderName]) {\n        require('three/examples/js/loaders/AssimpLoader');\n      }\n      return THREE[loaderName];\n    }\n    case 'babylon': {\n      const loaderName = 'BabylonLoader';\n      if (!THREE[loaderName]) {\n        require('three/examples/js/loaders/BabylonLoader');\n      }\n      return THREE[loaderName];\n    }\n    case 'bvh': {\n      const loaderName = 'BVHLoader';\n\n      if (!THREE[loaderName]) {\n        require('three/examples/js/loaders/BVHLoader');\n      }\n      return THREE[loaderName];\n    }\n    case 'pcd': {\n      const loaderName = 'PCDLoader';\n      if (!THREE[loaderName]) {\n        require('three/examples/js/loaders/PCDLoader');\n      }\n      return THREE[loaderName];\n    }\n    case 'ply': {\n      const loaderName = 'PLYLoader';\n      if (!THREE[loaderName]) {\n        require('three/examples/js/loaders/PLYLoader');\n      }\n      return THREE[loaderName];\n    }\n    case 'mtl':\n      return MTLLoader;\n    case 'vtk':\n    case 'vtp': {\n      const loaderName = 'VTKLoader';\n      if (!THREE[loaderName]) {\n        require('three/examples/js/loaders/VTKLoader');\n      }\n      return THREE[loaderName];\n    }\n    case 'x': {\n      const loaderName = 'XLoader';\n      if (!THREE[loaderName]) {\n        require('three/examples/js/loaders/XLoader');\n      }\n      return THREE[loaderName];\n    }\n    // case 'drc':\n    //   if (!THREE.DRACOLoader) require('three/examples/js/loaders/draco/DRACOLoader');\n    //   return THREE.DRACOLoader;\n    default:\n      throw new Error('ExpoTHREE.loaderClassForExtension(): Unrecognized file type ' + extension);\n  }\n}\n"]}